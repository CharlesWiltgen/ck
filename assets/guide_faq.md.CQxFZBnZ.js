import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.BmMagzGG.js";const k=JSON.parse('{"title":"FAQ","description":"","frontmatter":{},"headers":[],"relativePath":"guide/faq.md","filePath":"guide/faq.md"}'),t={name:"guide/faq.md"};function l(h,s,r,o,p,d){return e(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-label="Permalink to &quot;FAQ&quot;">​</a></h1><p>Frequently asked questions about ck.</p><h2 id="general" tabindex="-1">General <a class="header-anchor" href="#general" aria-label="Permalink to &quot;General&quot;">​</a></h2><h3 id="how-is-ck-different-from-grep-ripgrep-silver-searcher" tabindex="-1">How is ck different from grep/ripgrep/silver-searcher? <a class="header-anchor" href="#how-is-ck-different-from-grep-ripgrep-silver-searcher" aria-label="Permalink to &quot;How is ck different from grep/ripgrep/silver-searcher?&quot;">​</a></h3><p>ck includes all the features of traditional search tools, but adds semantic understanding. Search for “error handling” and find relevant code even when those exact words aren’t used. You can use ck as a drop-in replacement for grep while optionally leveraging semantic capabilities.</p><h3 id="does-it-work-offline" tabindex="-1">Does it work offline? <a class="header-anchor" href="#does-it-work-offline" aria-label="Permalink to &quot;Does it work offline?&quot;">​</a></h3><p>Yes, completely offline. The embedding model runs locally with no network calls. All indexing, searching, and model inference happens on your machine.</p><h3 id="is-it-fast-enough-for-large-codebases" tabindex="-1">Is it fast enough for large codebases? <a class="header-anchor" href="#is-it-fast-enough-for-large-codebases" aria-label="Permalink to &quot;Is it fast enough for large codebases?&quot;">​</a></h3><p>Yes. Performance benchmarks:</p><ul><li><strong>Indexing</strong> – ~1M LOC in under 2 minutes</li><li><strong>Search</strong> – Sub-500ms queries on typical codebases</li><li><strong>Delta updates</strong> – Only changed files are re-indexed</li></ul><p>The first semantic search builds the index automatically; after that only changed files are reprocessed, keeping searches sub-second even on large projects.</p><h3 id="can-i-use-it-in-scripts-automation" tabindex="-1">Can I use it in scripts/automation? <a class="header-anchor" href="#can-i-use-it-in-scripts-automation" aria-label="Permalink to &quot;Can I use it in scripts/automation?&quot;">​</a></h3><p>Absolutely. ck provides structured output formats:</p><ul><li><code>--json</code>: Single JSON array (good for small result sets)</li><li><code>--jsonl</code>: One JSON object per line (recommended for streaming, AI agents)</li><li><code>--no-snippet</code>: Metadata only (minimal bandwidth)</li></ul><p>Perfect for CI/CD pipelines, git hooks, and automated processing.</p><h2 id="installation-setup" tabindex="-1">Installation &amp; Setup <a class="header-anchor" href="#installation-setup" aria-label="Permalink to &quot;Installation &amp; Setup&quot;">​</a></h2><h3 id="where-are-embedding-models-downloaded-and-cached" tabindex="-1">Where are embedding models downloaded and cached? <a class="header-anchor" href="#where-are-embedding-models-downloaded-and-cached" aria-label="Permalink to &quot;Where are embedding models downloaded and cached?&quot;">​</a></h3><p>Models are cached in platform-specific directories:</p><ul><li><strong>Linux/macOS</strong>: <code>~/.cache/ck/models/</code></li><li><strong>Windows</strong>: <code>%LOCALAPPDATA%\\ck\\cache\\models\\</code></li><li><strong>Fallback</strong>: <code>.ck_models/models/</code> in current directory</li></ul><p>The model is downloaded once (~80-500MB depending on model) and reused thereafter.</p><h3 id="can-i-reuse-my-existing-huggingface-cache" tabindex="-1">Can I reuse my existing HuggingFace cache? <a class="header-anchor" href="#can-i-reuse-my-existing-huggingface-cache" aria-label="Permalink to &quot;Can I reuse my existing HuggingFace cache?&quot;">​</a></h3><p>Yes! ck uses <code>hf-hub</code> under the hood, so you can set environment variables to reuse your existing cache:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HF_HOME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/.cache/huggingface</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HF_HUB_CACHE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/.cache/huggingface/hub</span></span></code></pre></div><p>This avoids downloading models multiple times if you already have them cached.</p><h3 id="how-do-i-update-ck" tabindex="-1">How do I update ck? <a class="header-anchor" href="#how-do-i-update-ck" aria-label="Permalink to &quot;How do I update ck?&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Update from crates.io</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ck-search</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Or from source</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ck</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --path</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ck-cli</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force</span></span></code></pre></div><h2 id="indexing" tabindex="-1">Indexing <a class="header-anchor" href="#indexing" aria-label="Permalink to &quot;Indexing&quot;">​</a></h2><h3 id="how-big-are-the-indexes" tabindex="-1">How big are the indexes? <a class="header-anchor" href="#how-big-are-the-indexes" aria-label="Permalink to &quot;How big are the indexes?&quot;">​</a></h3><p>Typically 1-3x the size of your source code. The <code>.ck/</code> directory can be safely deleted to reclaim space and will be rebuilt on the next semantic search.</p><p>Index size depends on:</p><ul><li>Embedding model dimensions (384 for bge-small, 768 for nomic/jina)</li><li>Number of chunks (more small functions = more chunks)</li><li>Number of indexed files</li></ul><h3 id="why-does-indexing-take-so-long-the-first-time" tabindex="-1">Why does indexing take so long the first time? <a class="header-anchor" href="#why-does-indexing-take-so-long-the-first-time" aria-label="Permalink to &quot;Why does indexing take so long the first time?&quot;">​</a></h3><p>First-time indexing includes:</p><ol><li><strong>Model download</strong> (~80-500MB, one-time)</li><li><strong>File discovery</strong> (traversing directory tree)</li><li><strong>Chunking</strong> (parsing files with tree-sitter)</li><li><strong>Embedding generation</strong> (AI model inference for each chunk)</li></ol><p>Subsequent indexes only process changed files, making them much faster.</p><h3 id="large-files-26k-loc-re-index-slowly-on-changes-can-this-be-optimized" tabindex="-1">Large files (26K+ LOC) re-index slowly on changes. Can this be optimized? <a class="header-anchor" href="#large-files-26k-loc-re-index-slowly-on-changes-can-this-be-optimized" aria-label="Permalink to &quot;Large files (26K+ LOC) re-index slowly on changes. Can this be optimized?&quot;">​</a></h3><div class="warning custom-block"><p class="custom-block-title">Performance Impact on Large Files</p><p>Currently, ck re-indexes the entire file when it detects changes. This can be slow for files over 26K LOC.</p><p><strong>Why this happens</strong>:</p><ul><li>Semantic chunking boundaries could change based on file content</li><li>Size-based chunking could potentially use git diff, but semantic chunking cannot</li></ul><p><strong>Workarounds</strong>:</p><ol><li>Exclude very large files from indexing (add to <code>.ckignore</code>)</li><li>Use size-based chunking for large data files</li><li>Split large files if possible</li></ol><p><strong>Future</strong>: Git diff-based incremental indexing is being explored (#69).</p></div><h3 id="can-i-index-only-a-specific-subdirectory" tabindex="-1">Can I index only a specific subdirectory? <a class="header-anchor" href="#can-i-index-only-a-specific-subdirectory" aria-label="Permalink to &quot;Can I index only a specific subdirectory?&quot;">​</a></h3><p>Not currently. Indexing always works from the repository root.</p><p><strong>Example that doesn’t work as expected</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --index</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./docs</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Still indexes entire repo from root</span></span></code></pre></div><p><strong>Workaround</strong>: Use <code>.ckignore</code> to exclude everything except your target directory:</p><div class="language-gitignore vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gitignore</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Exclude everything</span></span>
<span class="line"><span>/*</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Include only docs</span></span>
<span class="line"><span>!/docs/</span></span></code></pre></div><p>This is a known limitation (#50).</p><h2 id="search" tabindex="-1">Search <a class="header-anchor" href="#search" aria-label="Permalink to &quot;Search&quot;">​</a></h2><h3 id="search-results-seem-irrelevant-how-can-i-improve-them" tabindex="-1">Search results seem irrelevant. How can I improve them? <a class="header-anchor" href="#search-results-seem-irrelevant-how-can-i-improve-them" aria-label="Permalink to &quot;Search results seem irrelevant. How can I improve them?&quot;">​</a></h3><p>Try these approaches:</p><p><strong>1. Adjust threshold</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Higher threshold = more strict</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --threshold</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;error handling&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Lower threshold = more exploratory</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --threshold</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pattern&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span></code></pre></div><p><strong>2. Try different models</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Code-specialized model</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --switch-model</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jina-code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Better for large functions</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --switch-model</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nomic-v1.5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p><strong>3. Use hybrid search</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Combines semantic + keyword matching</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hybrid</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;connection timeout&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span></code></pre></div><p><strong>4. Show relevance scores</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># See why results were matched</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --scores</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;auth&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span></code></pre></div><p><strong>5. Refine query</strong>:</p><ul><li>Be more specific: “JWT authentication” vs “auth”</li><li>Use technical terms: “connection pool” vs “database stuff”</li><li>Describe what it does: “retry with exponential backoff” vs “retry”</li></ul><h3 id="why-doesn-t-semantic-search-find-my-specific-function-name" tabindex="-1">Why doesn’t semantic search find my specific function name? <a class="header-anchor" href="#why-doesn-t-semantic-search-find-my-specific-function-name" aria-label="Permalink to &quot;Why doesn’t semantic search find my specific function name?&quot;">​</a></h3><p>Semantic search finds code by <em>meaning</em>, not exact text. For specific identifiers, use regular keyword search:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Find function by name (keyword)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;mySpecificFunction&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Find similar functionality (semantic)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sem</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;database connection pooling&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Best of both (hybrid)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hybrid</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;mySpecificFunction&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span></code></pre></div><h3 id="how-do-i-search-for-a-specific-file-type" tabindex="-1">How do I search for a specific file type? <a class="header-anchor" href="#how-do-i-search-for-a-specific-file-type" aria-label="Permalink to &quot;How do I search for a specific file type?&quot;">​</a></h3><p>Currently, use file globbing or path specifications:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Glob patterns</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pattern&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> **</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.rs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pattern&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> **</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.{js,ts}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Specific directory</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pattern&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/components/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># With exclusions</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --exclude</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;*.test.js&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pattern&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span></code></pre></div><p><strong>Note</strong>: A ripgrep-style <code>--type</code> flag is planned for future versions (#28).</p><h2 id="index-management" tabindex="-1">Index Management <a class="header-anchor" href="#index-management" aria-label="Permalink to &quot;Index Management&quot;">​</a></h2><h3 id="how-do-i-check-if-my-code-is-indexed" tabindex="-1">How do I check if my code is indexed? <a class="header-anchor" href="#how-do-i-check-if-my-code-is-indexed" aria-label="Permalink to &quot;How do I check if my code is indexed?&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Check index status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --status</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Shows:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># - Whether index exists</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># - Number of files indexed</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># - Embedding model used</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># - Last update time</span></span></code></pre></div><h3 id="when-should-i-rebuild-the-index" tabindex="-1">When should I rebuild the index? <a class="header-anchor" href="#when-should-i-rebuild-the-index" aria-label="Permalink to &quot;When should I rebuild the index?&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Rebuilding Is Rarely Needed</p><p>ck automatically detects and re-indexes changed files. You only need to rebuild when:</p><ul><li>Switching embedding models</li><li>Index seems corrupted</li><li>Major codebase restructuring</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Clean and rebuild</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --clean</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --index</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Or switch model (rebuilds automatically)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --switch-model</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nomic-v1.5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div></div><h3 id="can-i-have-multiple-indexes-for-different-models" tabindex="-1">Can I have multiple indexes for different models? <a class="header-anchor" href="#can-i-have-multiple-indexes-for-different-models" aria-label="Permalink to &quot;Can I have multiple indexes for different models?&quot;">​</a></h3><p>Not simultaneously. Each repository has one index using one model. To try different models:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Switch and compare</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --switch-model</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jina-code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sem</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pattern&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --switch-model</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nomic-v1.5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sem</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pattern&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span></code></pre></div><p>Switching models triggers a rebuild.</p><h2 id="file-filtering" tabindex="-1">File Filtering <a class="header-anchor" href="#file-filtering" aria-label="Permalink to &quot;File Filtering&quot;">​</a></h2><h3 id="what-files-are-excluded-by-default" tabindex="-1">What files are excluded by default? <a class="header-anchor" href="#what-files-are-excluded-by-default" aria-label="Permalink to &quot;What files are excluded by default?&quot;">​</a></h3><p>ck automatically excludes:</p><ul><li><strong>Binary files</strong> (detected via content, not extension)</li><li><strong>Hidden directories</strong> (<code>.git/</code>, <code>.cache/</code>, etc.)</li><li><strong>.gitignore patterns</strong> (respects repository exclusions)</li><li><strong>.ckignore patterns</strong> (semantic search specific exclusions)</li></ul><p>Default <code>.ckignore</code> includes:</p><ul><li>Images (png, jpg, gif, svg, etc.)</li><li>Videos (mp4, avi, mov, etc.)</li><li>Audio files (mp3, wav, flac, etc.)</li><li>Archives (zip, tar, gz, etc.)</li><li>Config files (*.json, *.yaml)</li><li>Build artifacts</li></ul><h3 id="how-do-i-customize-file-exclusions" tabindex="-1">How do I customize file exclusions? <a class="header-anchor" href="#how-do-i-customize-file-exclusions" aria-label="Permalink to &quot;How do I customize file exclusions?&quot;">​</a></h3><p>Edit <code>.ckignore</code> in your repository root:</p><div class="language-gitignore vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gitignore</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Add custom patterns</span></span>
<span class="line"><span>logs/</span></span>
<span class="line"><span>*.log</span></span>
<span class="line"><span>temp_*.txt</span></span>
<span class="line"><span>fixtures/</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Use ! to include despite parent exclusion</span></span>
<span class="line"><span>!important.log</span></span></code></pre></div><p>Uses gitignore syntax. Changes take effect on next index operation.</p><h3 id="can-i-search-files-that-are-gitignored" tabindex="-1">Can I search files that are gitignored? <a class="header-anchor" href="#can-i-search-files-that-are-gitignored" aria-label="Permalink to &quot;Can I search files that are gitignored?&quot;">​</a></h3><p>Yes, with flags:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Skip .gitignore rules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-ignore</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pattern&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Skip .ckignore rules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-ckignore</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pattern&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Skip both</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-ignore</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-ckignore</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pattern&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><h2 id="models-embedding" tabindex="-1">Models &amp; Embedding <a class="header-anchor" href="#models-embedding" aria-label="Permalink to &quot;Models &amp; Embedding&quot;">​</a></h2><h3 id="which-embedding-model-should-i-use" tabindex="-1">Which embedding model should I use? <a class="header-anchor" href="#which-embedding-model-should-i-use" aria-label="Permalink to &quot;Which embedding model should I use?&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Model</th><th>Best For</th><th>Trade-off</th></tr></thead><tbody><tr><td><code>bge-small</code></td><td>General use, fast</td><td>Smaller chunks (400 tokens)</td></tr><tr><td><code>nomic-v1.5</code></td><td>Large functions, docs</td><td>Larger download (~500MB)</td></tr><tr><td><code>jina-code</code></td><td>Code-specialized</td><td>Larger download (~500MB)</td></tr></tbody></table><p>See <a href="/ck/reference/models.html">Embedding Models</a> for detailed comparison.</p><h3 id="can-i-use-custom-embedding-models" tabindex="-1">Can I use custom embedding models? <a class="header-anchor" href="#can-i-use-custom-embedding-models" aria-label="Permalink to &quot;Can I use custom embedding models?&quot;">​</a></h3><p>Currently limited to models supported by fastembed-rs:</p><ul><li><code>bge-small</code> (default)</li><li><code>nomic-v1.5</code></li><li><code>jina-code</code></li></ul><p><strong>Future</strong>: External embedding API support (OpenAI, HuggingFace, etc.) is being considered (#49).</p><h3 id="do-i-need-gpu-for-embeddings" tabindex="-1">Do I need GPU for embeddings? <a class="header-anchor" href="#do-i-need-gpu-for-embeddings" aria-label="Permalink to &quot;Do I need GPU for embeddings?&quot;">​</a></h3><p>No, ck uses ONNX models via fastembed which run efficiently on CPU. GPU support is not required.</p><h2 id="privacy-security" tabindex="-1">Privacy &amp; Security <a class="header-anchor" href="#privacy-security" aria-label="Permalink to &quot;Privacy &amp; Security&quot;">​</a></h2><h3 id="what-about-privacy-security" tabindex="-1">What about privacy/security? <a class="header-anchor" href="#what-about-privacy-security" aria-label="Permalink to &quot;What about privacy/security?&quot;">​</a></h3><ul><li>✅ <strong>100% offline</strong>: No code or queries sent to external services</li><li>✅ <strong>No telemetry</strong>: No tracking or analytics</li><li>✅ <strong>No API keys</strong>: No external service dependencies</li><li>✅ <strong>Local models</strong>: Downloaded once, run locally forever</li></ul><p>Your code never leaves your machine.</p><h3 id="is-ck-safe-to-use-in-enterprise-environments" tabindex="-1">Is ck safe to use in enterprise environments? <a class="header-anchor" href="#is-ck-safe-to-use-in-enterprise-environments" aria-label="Permalink to &quot;Is ck safe to use in enterprise environments?&quot;">​</a></h3><p>Yes. Since everything runs locally:</p><ul><li>No data exfiltration risk</li><li>No dependency on external services</li><li>No proprietary code exposure</li><li>Works in air-gapped environments (after initial model download)</li></ul><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><h3 id="index-not-found-error" tabindex="-1">“Index not found” error <a class="header-anchor" href="#index-not-found-error" aria-label="Permalink to &quot;“Index not found” error&quot;">​</a></h3><p>Run a semantic search to build the index automatically:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sem</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pattern&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span></code></pre></div><p>Or explicitly create index:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --index</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><h3 id="model-download-fails" tabindex="-1">Model download fails <a class="header-anchor" href="#model-download-fails" aria-label="Permalink to &quot;Model download fails&quot;">​</a></h3><p><strong>Check</strong>:</p><ol><li>Internet connection</li><li>Disk space (~500MB for models)</li><li>Cache directory writable</li></ol><p><strong>Retry</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Clear cache and retry</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.cache/ck/models/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --index</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><h3 id="search-hangs-or-is-very-slow" tabindex="-1">Search hangs or is very slow <a class="header-anchor" href="#search-hangs-or-is-very-slow" aria-label="Permalink to &quot;Search hangs or is very slow&quot;">​</a></h3><p><strong>Possible causes</strong>:</p><ul><li>First-time index build in progress</li><li>Very large codebase</li><li>Low memory</li></ul><p><strong>Solutions</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Check index status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --status</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Limit results</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --topk</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pattern&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Exclude large directories</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vendor/&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .ckignore</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;node_modules/&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .ckignore</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --clean</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --index</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><h3 id="embedding-dimension-mismatch-error" tabindex="-1">“Embedding dimension mismatch” error <a class="header-anchor" href="#embedding-dimension-mismatch-error" aria-label="Permalink to &quot;“Embedding dimension mismatch” error&quot;">​</a></h3><p>Happens when mixing embedding models. Solution:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --clean</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --index</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --model</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bge-small</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><h2 id="still-have-questions" tabindex="-1">Still Have Questions? <a class="header-anchor" href="#still-have-questions" aria-label="Permalink to &quot;Still Have Questions?&quot;">​</a></h2><ul><li>Check <a href="/ck/guide/limitations.html">Known Limitations</a></li><li>See <a href="/ck/reference/advanced.html">Advanced Configuration</a></li><li>Open an issue on <a href="https://github.com/BeaconBay/ck/issues" target="_blank" rel="noreferrer">GitHub</a></li><li>Review <a href="https://github.com/BeaconBay/ck/issues?q=is%3Aissue" target="_blank" rel="noreferrer">existing issues</a></li></ul>`,124)])])}const g=i(t,[["render",l]]);export{k as __pageData,g as default};
