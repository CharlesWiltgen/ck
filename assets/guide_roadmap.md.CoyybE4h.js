import{_ as t,c as i,o as a,ag as r}from"./chunks/framework.BmMagzGG.js";const g=JSON.parse('{"title":"Roadmap","description":"","frontmatter":{},"headers":[],"relativePath":"guide/roadmap.md","filePath":"guide/roadmap.md"}'),n={name:"guide/roadmap.md"};function o(s,e,l,d,u,c){return a(),i("div",null,[...e[0]||(e[0]=[r(`<h1 id="roadmap" tabindex="-1">Roadmap <a class="header-anchor" href="#roadmap" aria-label="Permalink to &quot;Roadmap&quot;">​</a></h1><p>ck’s development roadmap, completed features, and planned improvements.</p><h2 id="current-version-v0-5-3" tabindex="-1">Current Version (v0.5.3) <a class="header-anchor" href="#current-version-v0-5-3" aria-label="Permalink to &quot;Current Version (v0.5.3)&quot;">​</a></h2><h3 id="completed-features-✅" tabindex="-1">Completed Features ✅ <a class="header-anchor" href="#completed-features-✅" aria-label="Permalink to &quot;Completed Features ✅&quot;">​</a></h3><h4 id="core-search" tabindex="-1">Core Search <a class="header-anchor" href="#core-search" aria-label="Permalink to &quot;Core Search&quot;">​</a></h4><ul><li><strong>grep-compatible CLI</strong> with semantic search capabilities</li><li><strong>Semantic search</strong> using local embedding models</li><li><strong>Hybrid search</strong> combining semantic + keyword with Reciprocal Rank Fusion</li><li><strong>File listing flags</strong> (-l, -L) for grep compatibility</li><li><strong>Threshold filtering</strong> for relevance control</li><li><strong>Relevance scoring</strong> with visual highlighting</li><li><strong>Complete code section extraction</strong> (--full-section flag)</li></ul><h4 id="ai-integration" tabindex="-1">AI Integration <a class="header-anchor" href="#ai-integration" aria-label="Permalink to &quot;AI Integration&quot;">​</a></h4><ul><li><strong>MCP (Model Context Protocol) server</strong> for AI agent integration</li><li><strong>Built-in pagination</strong> for large result sets</li><li><strong>JSONL output format</strong> for streaming workflows</li><li><strong>Structured output</strong> (JSON/JSONL) for automation</li></ul><h4 id="indexing-performance" tabindex="-1">Indexing &amp; Performance <a class="header-anchor" href="#indexing-performance" aria-label="Permalink to &quot;Indexing &amp; Performance&quot;">​</a></h4><ul><li><strong>Incremental index updates</strong> with hash-based change detection</li><li><strong>Automatic delta indexing</strong> (only changed files)</li><li><strong>Smart file filtering</strong> with .gitignore and .ckignore support</li><li><strong>Clean stdout/stderr separation</strong> for reliable scripting</li><li><strong>Interrupt handling</strong> (safe Ctrl+C during indexing)</li></ul><h4 id="language-support" tabindex="-1">Language Support <a class="header-anchor" href="#language-support" aria-label="Permalink to &quot;Language Support&quot;">​</a></h4><ul><li><strong>Tree-sitter parsing</strong> for 8 languages (Python, JS/TS, Rust, Go, Ruby, Haskell, C#, Zig)</li><li><strong>Intelligent chunking</strong> at function/class boundaries</li><li><strong>Token-aware chunking</strong> with HuggingFace tokenizers</li><li><strong>Smart binary detection</strong> (content-based, not extension-based)</li></ul><h4 id="embedding-models" tabindex="-1">Embedding Models <a class="header-anchor" href="#embedding-models" aria-label="Permalink to &quot;Embedding Models&quot;">​</a></h4><ul><li><strong>FastEmbed integration</strong> with multiple models</li><li><strong>BGE-Small</strong> (default, fast, 400-token chunks)</li><li><strong>Nomic V1.5</strong> (8K context, 1024-token chunks)</li><li><strong>Jina Code</strong> (code-specialized, 8K context)</li><li><strong>Model switching</strong> with automatic rebuild detection</li></ul><h4 id="user-experience" tabindex="-1">User Experience <a class="header-anchor" href="#user-experience" aria-label="Permalink to &quot;User Experience&quot;">​</a></h4><ul><li><strong>File exclusion patterns</strong> and glob support</li><li><strong>.ckignore file</strong> with automatic creation and sensible defaults</li><li><strong>Published to crates.io</strong> (<code>cargo install ck-search</code>)</li><li><strong>Cross-platform support</strong> (Linux, macOS, Windows)</li><li><strong>Comprehensive documentation</strong> with examples</li></ul><h2 id="next-release-v0-6" tabindex="-1">Next Release (v0.6) <a class="header-anchor" href="#next-release-v0-6" aria-label="Permalink to &quot;Next Release (v0.6)&quot;">​</a></h2><h3 id="planned-features-🚧" tabindex="-1">Planned Features 🚧 <a class="header-anchor" href="#planned-features-🚧" aria-label="Permalink to &quot;Planned Features 🚧&quot;">​</a></h3><h4 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h4><ul><li><strong>Configuration file support</strong> (.ck.toml or ck.config.json) — Default model selection — Default threshold and top-k values — Per-project preferences — Custom exclusion patterns</li></ul><h4 id="distribution" tabindex="-1">Distribution <a class="header-anchor" href="#distribution" aria-label="Permalink to &quot;Distribution&quot;">​</a></h4><ul><li><strong>Package manager distributions</strong> — Homebrew formula for macOS — APT packages for Debian/Ubuntu — RPM packages for Fedora/RHEL — Chocolatey package for Windows — Pre-built binaries for all platforms</li></ul><h4 id="mcp-enhancements" tabindex="-1">MCP Enhancements <a class="header-anchor" href="#mcp-enhancements" aria-label="Permalink to &quot;MCP Enhancements&quot;">​</a></h4><ul><li><strong>Enhanced MCP tools</strong> — File writing capabilities — Refactoring assistance — Code transformation tools — Bulk operations</li></ul><h4 id="editor-integration" tabindex="-1">Editor Integration <a class="header-anchor" href="#editor-integration" aria-label="Permalink to &quot;Editor Integration&quot;">​</a></h4><ul><li><p><strong>VS Code extension</strong> — Inline semantic search — Code navigation — Quick actions — Status bar integration</p></li><li><p><strong>JetBrains plugin</strong> — IntelliJ IDEA support — PyCharm support — WebStorm support — Common features across IDEs</p></li></ul><h4 id="language-support-1" tabindex="-1">Language Support <a class="header-anchor" href="#language-support-1" aria-label="Permalink to &quot;Language Support&quot;">​</a></h4><ul><li><strong>Additional language chunkers</strong> — Java (with tree-sitter-java) — PHP (with tree-sitter-php) — Swift (with tree-sitter-swift) — Kotlin (requested #21) — C/C++ (requested #21)</li></ul><h2 id="future-considerations" tabindex="-1">Future Considerations <a class="header-anchor" href="#future-considerations" aria-label="Permalink to &quot;Future Considerations&quot;">​</a></h2><h3 id="community-requests" tabindex="-1">Community Requests <a class="header-anchor" href="#community-requests" aria-label="Permalink to &quot;Community Requests&quot;">​</a></h3><p>Based on GitHub issues and discussions:</p><h4 id="file-type-filtering-28" tabindex="-1">File Type Filtering (#28) <a class="header-anchor" href="#file-type-filtering-28" aria-label="Permalink to &quot;File Type Filtering (#28)&quot;">​</a></h4><p><strong>Status</strong>: Requested <strong>Description</strong>: Add <code>--type</code> flag similar to ripgrep</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Proposed syntax</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rust</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pattern&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> js,ts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pattern&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -T</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rust</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pattern&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Short form</span></span></code></pre></div><p><strong>Use case</strong>: Quickly filter searches to specific file types without glob patterns.</p><h4 id="git-diff-based-re-indexing-69" tabindex="-1">Git Diff-Based Re-indexing (#69) <a class="header-anchor" href="#git-diff-based-re-indexing-69" aria-label="Permalink to &quot;Git Diff-Based Re-indexing (#69)&quot;">​</a></h4><p><strong>Status</strong>: Under exploration <strong>Description</strong>: Use git diff for incremental updates of large files</p><p><strong>Challenge</strong>: Semantic chunking boundaries can change based on file content, making diff-based updates complex.</p><p><strong>Potential approach</strong>:</p><ul><li>Implement for size-based chunking first</li><li>Explore heuristics for semantic chunking</li><li>May require trade-offs in accuracy vs speed</li></ul><h4 id="external-embedding-api-support-49" tabindex="-1">External Embedding API Support (#49) <a class="header-anchor" href="#external-embedding-api-support-49" aria-label="Permalink to &quot;External Embedding API Support (#49)&quot;">​</a></h4><p><strong>Status</strong>: Under consideration <strong>Description</strong>: Support external embedding services</p><p><strong>Requested APIs</strong>:</p><ul><li>OpenAI embeddings</li><li>HuggingFace Inference API</li><li>Anthropic Claude embeddings</li><li>Custom HTTP endpoints</li></ul><p><strong>Trade-offs</strong>:</p><ul><li>✅ Access to latest/proprietary models</li><li>✅ No local model storage</li><li>❌ Requires internet connection</li><li>❌ Privacy/security considerations</li><li>❌ API costs</li></ul><h4 id="bug-detection-category-23" tabindex="-1">Bug Detection Category (#23) <a class="header-anchor" href="#bug-detection-category-23" aria-label="Permalink to &quot;Bug Detection Category (#23)&quot;">​</a></h4><p><strong>Status</strong>: Research phase <strong>Description</strong>: Specialized search for potential bugs</p><p><strong>Possible implementation</strong>:</p><ul><li>Pre-trained model for code smell detection</li><li>Pattern-based heuristics</li><li>Integration with static analysis tools</li><li>Custom queries for common bug patterns</li></ul><h2 id="long-term-vision" tabindex="-1">Long-Term Vision <a class="header-anchor" href="#long-term-vision" aria-label="Permalink to &quot;Long-Term Vision&quot;">​</a></h2><h3 id="performance" tabindex="-1">Performance <a class="header-anchor" href="#performance" aria-label="Permalink to &quot;Performance&quot;">​</a></h3><ul><li>GPU acceleration for embedding generation</li><li>Distributed indexing for monorepos</li><li>Caching strategies for frequently searched patterns</li><li>Streaming search results</li></ul><h3 id="advanced-features" tabindex="-1">Advanced Features <a class="header-anchor" href="#advanced-features" aria-label="Permalink to &quot;Advanced Features&quot;">​</a></h3><ul><li>Code similarity detection (find duplicate code)</li><li>Dependency graph analysis</li><li>Cross-repository search</li><li>Code metrics and quality analysis</li><li>Integration with code review tools</li></ul><h3 id="ai-capabilities" tabindex="-1">AI Capabilities <a class="header-anchor" href="#ai-capabilities" aria-label="Permalink to &quot;AI Capabilities&quot;">​</a></h3><ul><li>Context-aware code completion</li><li>Automated documentation generation</li><li>Code explanation and summarization</li><li>Refactoring suggestions</li><li>Test generation</li></ul><h3 id="enterprise-features" tabindex="-1">Enterprise Features <a class="header-anchor" href="#enterprise-features" aria-label="Permalink to &quot;Enterprise Features&quot;">​</a></h3><ul><li>Team collaboration features</li><li>Shared index repositories</li><li>Access control and permissions</li><li>Audit logging</li><li>On-premise deployment options</li></ul><h2 id="contributing-to-the-roadmap" tabindex="-1">Contributing to the Roadmap <a class="header-anchor" href="#contributing-to-the-roadmap" aria-label="Permalink to &quot;Contributing to the Roadmap&quot;">​</a></h2><h3 id="how-to-influence-priority" tabindex="-1">How to Influence Priority <a class="header-anchor" href="#how-to-influence-priority" aria-label="Permalink to &quot;How to Influence Priority&quot;">​</a></h3><ol><li><strong>Vote on existing issues</strong>: Use 👍 reactions on GitHub issues</li><li><strong>Open feature requests</strong>: Describe your use case clearly</li><li><strong>Contribute code</strong>: Submit PRs for features you need</li><li><strong>Sponsor development</strong>: Support prioritization of specific features</li></ol><h3 id="feature-request-guidelines" tabindex="-1">Feature Request Guidelines <a class="header-anchor" href="#feature-request-guidelines" aria-label="Permalink to &quot;Feature Request Guidelines&quot;">​</a></h3><p>When requesting features:</p><ul><li>✅ Describe the problem, not just the solution</li><li>✅ Provide concrete use cases</li><li>✅ Consider implementation complexity</li><li>✅ Think about API design</li><li>✅ Check if workarounds exist</li></ul><p><strong>Good example</strong>:</p><blockquote><p>“As a developer working on microservices, I need to search across multiple repos simultaneously. Currently I have to cd into each repo and search separately, which is tedious for finding related implementations.”</p></blockquote><p><strong>Less helpful</strong>:</p><blockquote><p>“Add multi-repo search”</p></blockquote><h2 id="version-timeline" tabindex="-1">Version Timeline <a class="header-anchor" href="#version-timeline" aria-label="Permalink to &quot;Version Timeline&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Version</th><th>Focus</th><th>Status</th></tr></thead><tbody><tr><td>v0.1</td><td>MVP, basic search</td><td>✅ Released</td></tr><tr><td>v0.2</td><td>Tree-sitter, chunking</td><td>✅ Released</td></tr><tr><td>v0.3</td><td>Incremental indexing</td><td>✅ Released</td></tr><tr><td>v0.4</td><td>Multiple models</td><td>✅ Released</td></tr><tr><td>v0.5</td><td>MCP integration</td><td>✅ Released (current)</td></tr><tr><td>v0.6</td><td>Config, distribution</td><td>🚧 In planning</td></tr><tr><td>v0.7</td><td>Editor integrations</td><td>📋 Planned</td></tr><tr><td>v0.8</td><td>Advanced features</td><td>💭 Conceptual</td></tr></tbody></table><h2 id="breaking-changes-policy" tabindex="-1">Breaking Changes Policy <a class="header-anchor" href="#breaking-changes-policy" aria-label="Permalink to &quot;Breaking Changes Policy&quot;">​</a></h2><p>ck follows <a href="https://semver.org/" target="_blank" rel="noreferrer">Semantic Versioning</a>:</p><ul><li><strong>MAJOR</strong> (1.0.0): Breaking changes to CLI or API</li><li><strong>MINOR</strong> (0.X.0): New features, backward compatible</li><li><strong>PATCH</strong> (0.0.X): Bug fixes, backward compatible</li></ul><h3 id="v1-0-stability" tabindex="-1">v1.0 Stability <a class="header-anchor" href="#v1-0-stability" aria-label="Permalink to &quot;v1.0 Stability&quot;">​</a></h3><p>Before reaching v1.0, ck will:</p><ul><li>Stabilize CLI interface</li><li>Finalize MCP tool signatures</li><li>Complete core feature set</li><li>Achieve production maturity</li><li>Document upgrade paths</li></ul><h2 id="see-also" tabindex="-1">See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See Also&quot;">​</a></h2><ul><li><a href="/ck/guide/limitations.html">Known Limitations</a> — Current constraints</li><li><a href="/ck/guide/faq.html">FAQ</a> — Common questions</li><li><a href="/ck/contributing/development.html">Contributing Guide</a> — How to contribute</li><li><a href="https://github.com/BeaconBay/ck/issues" target="_blank" rel="noreferrer">GitHub Issues</a> — Feature requests and bugs</li><li><a href="https://github.com/BeaconBay/ck/blob/main/CHANGELOG.md" target="_blank" rel="noreferrer">Changelog</a> — Detailed release history</li></ul>`,79)])])}const p=t(n,[["render",o]]);export{g as __pageData,p as default};
