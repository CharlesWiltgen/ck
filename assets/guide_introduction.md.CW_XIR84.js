import{_ as a,c as e,o as s,ag as t}from"./chunks/framework.BmMagzGG.js";const k=JSON.parse('{"title":"Introduction to ck","description":"Semantic code search tool that finds code by meaning, not keywords. Drop-in grep replacement with AI-powered understanding for developers and AI agents.","frontmatter":{"title":"Introduction to ck","description":"Semantic code search tool that finds code by meaning, not keywords. Drop-in grep replacement with AI-powered understanding for developers and AI agents."},"headers":[],"relativePath":"guide/introduction.md","filePath":"guide/introduction.md"}'),n={name:"guide/introduction.md"};function r(o,i,l,h,d,c){return s(),e("div",null,[...i[0]||(i[0]=[t(`<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h1><p><strong>ck (seek)</strong> finds code by meaning, not just keywords. It’s grep that understands what you’re looking for — search for “error handling” and find try/catch blocks, error returns, and exception handling code even when those exact words aren’t present.</p><h2 id="what-is-ck" tabindex="-1">What is ck? <a class="header-anchor" href="#what-is-ck" aria-label="Permalink to &quot;What is ck?&quot;">​</a></h2><p>ck is a semantic code search tool that combines the familiarity of grep with the intelligence of modern AI embeddings. It’s designed for:</p><ul><li><strong>Developers</strong> who want to find code by what it does, not what it’s named</li><li><strong>AI agents</strong> that need reliable code search capabilities via MCP protocol</li><li><strong>Teams</strong> exploring large codebases and understanding unfamiliar code</li><li><strong>Code reviewers</strong> finding related code and patterns across files</li></ul><h2 id="key-capabilities" tabindex="-1">Key Capabilities <a class="header-anchor" href="#key-capabilities" aria-label="Permalink to &quot;Key Capabilities&quot;">​</a></h2><h3 id="🔍-semantic-search" tabindex="-1">🔍 Semantic Search <a class="header-anchor" href="#🔍-semantic-search" aria-label="Permalink to &quot;🔍 Semantic Search&quot;">​</a></h3><p>Find code by concept, not keywords:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sem</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;error handling&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sem</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;authentication logic&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sem</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;database connection pooling&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span></code></pre></div><h3 id="⚡-grep-compatibility" tabindex="-1">⚡ grep Compatibility <a class="header-anchor" href="#⚡-grep-compatibility" aria-label="Permalink to &quot;⚡ grep Compatibility&quot;">​</a></h3><p>All your muscle memory works:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;TODO&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.rs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fixme&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;error&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span></code></pre></div><h3 id="🎯-hybrid-search" tabindex="-1">🎯 Hybrid Search <a class="header-anchor" href="#🎯-hybrid-search" aria-label="Permalink to &quot;🎯 Hybrid Search&quot;">​</a></h3><p>Best of both worlds:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hybrid</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;connection timeout&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span></code></pre></div><h3 id="🤖-ai-integration" tabindex="-1">🤖 AI Integration <a class="header-anchor" href="#🤖-ai-integration" aria-label="Permalink to &quot;🤖 AI Integration&quot;">​</a></h3><p>Built-in MCP server for Claude Desktop, Cursor, and other AI tools:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --serve</span></span></code></pre></div><h2 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h2><ol><li><strong>Indexing</strong> – ck automatically creates and maintains semantic indexes of your code</li><li><strong>Embedding</strong> – Uses local AI models (BGE, Nomic, Jina) to understand code semantics</li><li><strong>Search</strong> – Finds semantically similar code chunks using vector similarity</li><li><strong>Results</strong> – Returns familiar grep-style output with optional relevance scores</li></ol><h2 id="why-ck" tabindex="-1">Why ck? <a class="header-anchor" href="#why-ck" aria-label="Permalink to &quot;Why ck?&quot;">​</a></h2><h3 id="vs-grep-ripgrep" tabindex="-1">vs. grep/ripgrep <a class="header-anchor" href="#vs-grep-ripgrep" aria-label="Permalink to &quot;vs. grep/ripgrep&quot;">​</a></h3><ul><li>✅ Understands code meaning, not just text patterns</li><li>✅ Finds related code even with different terminology</li><li>✅ Maintains full grep compatibility for keyword search</li><li>✅ Automatic smart file filtering (.ckignore)</li></ul><h3 id="vs-ide-search" tabindex="-1">vs. IDE search <a class="header-anchor" href="#vs-ide-search" aria-label="Permalink to &quot;vs. IDE search&quot;">​</a></h3><ul><li>✅ Works across entire codebase, not just open files</li><li>✅ Command-line friendly for scripts and automation</li><li>✅ Semantic understanding beyond symbol search</li><li>✅ AI agent integration via MCP</li></ul><h3 id="vs-ai-code-search-services" tabindex="-1">vs. AI code search services <a class="header-anchor" href="#vs-ai-code-search-services" aria-label="Permalink to &quot;vs. AI code search services&quot;">​</a></h3><ul><li>✅ 100% offline — no code leaves your machine</li><li>✅ No API keys or subscriptions required</li><li>✅ Fast local inference</li><li>✅ Privacy-first design</li></ul><h2 id="design-philosophy" tabindex="-1">Design Philosophy <a class="header-anchor" href="#design-philosophy" aria-label="Permalink to &quot;Design Philosophy&quot;">​</a></h2><ul><li><strong>Drop-in compatibility</strong> – Works like grep, enhances where needed</li><li><strong>Automatic everything</strong> – Index management, updates, model downloads</li><li><strong>Privacy-first</strong> – Everything runs locally, no telemetry</li><li><strong>Performance matters</strong> – Fast indexing, sub-second queries</li><li><strong>AI-native</strong> – Built for both humans and AI agents</li></ul><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li><a href="/ck/guide/installation.html">Get started</a> with installation</li><li>Learn <a href="/ck/guide/basic-usage.html">basic usage</a> patterns</li><li>Explore <a href="/ck/features/mcp-integration.html">MCP integration</a> for AI agents</li><li>Read the <a href="/ck/reference/cli.html">CLI reference</a> for all options</li></ul>`,31)])])}const g=a(n,[["render",r]]);export{k as __pageData,g as default};
