import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.BmMagzGG.js";const k=JSON.parse(`{"title":"Architecture","description":"Technical architecture of ck's modular Rust workspace. Understand crate organization, indexing pipeline, search algorithms, and design decisions.","frontmatter":{"title":"Architecture","description":"Technical architecture of ck's modular Rust workspace. Understand crate organization, indexing pipeline, search algorithms, and design decisions."},"headers":[],"relativePath":"reference/architecture.md","filePath":"reference/architecture.md"}`),l={name:"reference/architecture.md"};function t(p,s,r,h,c,o){return n(),i("div",null,[...s[0]||(s[0]=[e(`<h1 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">​</a></h1><p>Understanding ck&#39;s modular Rust workspace architecture.</p><h2 id="workspace-structure" tabindex="-1">Workspace Structure <a class="header-anchor" href="#workspace-structure" aria-label="Permalink to &quot;Workspace Structure&quot;">​</a></h2><p>ck uses a Cargo workspace with specialized crates:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ck/</span></span>
<span class="line"><span>├── ck-cli/          # Command-line interface and MCP server</span></span>
<span class="line"><span>├── ck-core/         # Shared types, configuration, utilities</span></span>
<span class="line"><span>├── ck-engine/       # Search engine implementations</span></span>
<span class="line"><span>├── ck-index/        # File indexing and sidecar management</span></span>
<span class="line"><span>├── ck-embed/        # Text embedding providers</span></span>
<span class="line"><span>├── ck-ann/          # Approximate nearest neighbor indices</span></span>
<span class="line"><span>├── ck-chunk/        # Text segmentation and parsing</span></span>
<span class="line"><span>└── ck-models/       # Model registry and configuration</span></span></code></pre></div><h2 id="crate-responsibilities" tabindex="-1">Crate Responsibilities <a class="header-anchor" href="#crate-responsibilities" aria-label="Permalink to &quot;Crate Responsibilities&quot;">​</a></h2><h3 id="ck-cli" tabindex="-1">ck-cli <a class="header-anchor" href="#ck-cli" aria-label="Permalink to &quot;ck-cli&quot;">​</a></h3><p><strong>Purpose</strong>: User-facing CLI and MCP server</p><p><strong>Key components:</strong></p><ul><li>Argument parsing (clap)</li><li>MCP JSON-RPC server</li><li>Output formatting</li><li>User interaction</li></ul><p><strong>Dependencies:</strong> All other crates</p><h3 id="ck-core" tabindex="-1">ck-core <a class="header-anchor" href="#ck-core" aria-label="Permalink to &quot;ck-core&quot;">​</a></h3><p><strong>Purpose</strong>: Shared types and utilities</p><p><strong>Key components:</strong></p><ul><li>SearchResult types</li><li>Configuration structures</li><li>Error types (anyhow)</li><li>Common utilities</li></ul><p><strong>Dependencies:</strong> None (foundation crate)</p><h3 id="ck-engine" tabindex="-1">ck-engine <a class="header-anchor" href="#ck-engine" aria-label="Permalink to &quot;ck-engine&quot;">​</a></h3><p><strong>Purpose</strong>: Search implementations</p><p><strong>Key components:</strong></p><ul><li>RegexEngine: Pattern matching</li><li>SemanticEngine: Vector similarity search</li><li>HybridEngine: Reciprocal Rank Fusion</li><li>Result ranking and scoring</li></ul><p><strong>Dependencies:</strong> ck-core, ck-index, ck-embed, ck-ann</p><h3 id="ck-index" tabindex="-1">ck-index <a class="header-anchor" href="#ck-index" aria-label="Permalink to &quot;ck-index&quot;">​</a></h3><p><strong>Purpose</strong>: File indexing and management</p><p><strong>Key components:</strong></p><ul><li>File discovery and traversal</li><li>Hash-based change detection</li><li>Incremental index updates</li><li>Sidecar file management</li><li>Exclusion pattern handling</li></ul><p><strong>Dependencies:</strong> ck-core, ck-chunk</p><h3 id="ck-embed" tabindex="-1">ck-embed <a class="header-anchor" href="#ck-embed" aria-label="Permalink to &quot;ck-embed&quot;">​</a></h3><p><strong>Purpose</strong>: Embedding generation</p><p><strong>Key components:</strong></p><ul><li>FastEmbed integration</li><li>Multiple model support (BGE, Nomic, Jina)</li><li>Token-aware chunking</li><li>Embedding caching</li><li>Model download management</li></ul><p><strong>Dependencies:</strong> ck-core, ck-models</p><h3 id="ck-ann" tabindex="-1">ck-ann <a class="header-anchor" href="#ck-ann" aria-label="Permalink to &quot;ck-ann&quot;">​</a></h3><p><strong>Purpose</strong>: Vector similarity search</p><p><strong>Key components:</strong></p><ul><li>Approximate Nearest Neighbor indices</li><li>Cosine similarity scoring</li><li>Index persistence</li><li>Vector storage</li></ul><p><strong>Dependencies:</strong> ck-core</p><h3 id="ck-chunk" tabindex="-1">ck-chunk <a class="header-anchor" href="#ck-chunk" aria-label="Permalink to &quot;ck-chunk&quot;">​</a></h3><p><strong>Purpose</strong>: Intelligent code chunking</p><p><strong>Key components:</strong></p><ul><li>Tree-sitter parsing (7+ languages)</li><li>Semantic boundary detection</li><li>Token counting (HuggingFace tokenizers)</li><li>Content-based text detection</li><li>Language detection</li></ul><p><strong>Dependencies:</strong> ck-core, ck-models</p><h3 id="ck-models" tabindex="-1">ck-models <a class="header-anchor" href="#ck-models" aria-label="Permalink to &quot;ck-models&quot;">​</a></h3><p><strong>Purpose</strong>: Model configuration</p><p><strong>Key components:</strong></p><ul><li>Model registry (BGE, Nomic, Jina)</li><li>Token limits and dimensions</li><li>Model aliases</li><li>Chunking configuration</li></ul><p><strong>Dependencies:</strong> ck-core</p><h2 id="data-flow" tabindex="-1">Data Flow <a class="header-anchor" href="#data-flow" aria-label="Permalink to &quot;Data Flow&quot;">​</a></h2><h3 id="indexing-flow" tabindex="-1">Indexing Flow <a class="header-anchor" href="#indexing-flow" aria-label="Permalink to &quot;Indexing Flow&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>User Command (ck --index .)</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>ck-cli: Parse arguments</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>ck-index: Discover files</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>ck-chunk: Parse and segment code</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>ck-embed: Generate embeddings</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>ck-ann: Build vector index</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>ck-index: Save index to .ck/</span></span></code></pre></div><h3 id="search-flow-semantic" tabindex="-1">Search Flow (Semantic) <a class="header-anchor" href="#search-flow-semantic" aria-label="Permalink to &quot;Search Flow (Semantic)&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>User Query (ck --sem &quot;pattern&quot; .)</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>ck-cli: Parse arguments</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>ck-embed: Embed query</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>ck-ann: Find similar vectors</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>ck-engine: Rank and score results</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>ck-cli: Format and display output</span></span></code></pre></div><h3 id="search-flow-hybrid" tabindex="-1">Search Flow (Hybrid) <a class="header-anchor" href="#search-flow-hybrid" aria-label="Permalink to &quot;Search Flow (Hybrid)&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>User Query (ck --hybrid &quot;pattern&quot; .)</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>ck-cli: Parse arguments</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>[Parallel]</span></span>
<span class="line"><span>├─ ck-engine (SemanticEngine): Semantic search</span></span>
<span class="line"><span>└─ ck-engine (RegexEngine): Keyword search</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>ck-engine (HybridEngine): RRF fusion</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>ck-cli: Format and display output</span></span></code></pre></div><h2 id="key-design-patterns" tabindex="-1">Key Design Patterns <a class="header-anchor" href="#key-design-patterns" aria-label="Permalink to &quot;Key Design Patterns&quot;">​</a></h2><h3 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h3><p>Uses <code>anyhow::Result</code> consistently:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> anyhow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Vec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SearchResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="async-await" tabindex="-1">Async/Await <a class="header-anchor" href="#async-await" aria-label="Permalink to &quot;Async/Await&quot;">​</a></h3><p>Tokio runtime for I/O operations:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#[tokio</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;()&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="parallel-processing" tabindex="-1">Parallel Processing <a class="header-anchor" href="#parallel-processing" aria-label="Permalink to &quot;Parallel Processing&quot;">​</a></h3><p>Rayon for CPU-intensive tasks:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rayon</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prelude</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">files</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">par_iter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="memory-mapped-files" tabindex="-1">Memory-Mapped Files <a class="header-anchor" href="#memory-mapped-files" aria-label="Permalink to &quot;Memory-Mapped Files&quot;">​</a></h3><p>Efficient large file access:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> memmap2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Mmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mmap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsafe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Mmap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Access file contents without full load</span></span></code></pre></div><h2 id="storage-format" tabindex="-1">Storage Format <a class="header-anchor" href="#storage-format" aria-label="Permalink to &quot;Storage Format&quot;">​</a></h2><h3 id="index-structure" tabindex="-1">Index Structure <a class="header-anchor" href="#index-structure" aria-label="Permalink to &quot;Index Structure&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.ck/</span></span>
<span class="line"><span>├── manifest.json          # Index metadata</span></span>
<span class="line"><span>│   └── { model, dimensions, timestamp, ... }</span></span>
<span class="line"><span>├── embeddings.json        # Vector embeddings</span></span>
<span class="line"><span>│   └── { file_path: [vectors...], ... }</span></span>
<span class="line"><span>├── ann_index.bin          # ANN index (binary)</span></span>
<span class="line"><span>└── tantivy_index/         # Keyword search index</span></span>
<span class="line"><span>    ├── meta.json</span></span>
<span class="line"><span>    └── *.seg files</span></span></code></pre></div><h3 id="sidecar-files" tabindex="-1">Sidecar Files <a class="header-anchor" href="#sidecar-files" aria-label="Permalink to &quot;Sidecar Files&quot;">​</a></h3><p>Each source file gets a sidecar:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src/</span></span>
<span class="line"><span>├── main.rs</span></span>
<span class="line"><span>└── .ck/</span></span>
<span class="line"><span>    └── main.rs.ck         # Sidecar with chunks and hashes</span></span></code></pre></div><p>Sidecar contains:</p><ul><li>File hash (for change detection)</li><li>Chunk boundaries</li><li>Embedding IDs</li><li>Metadata</li></ul><h2 id="performance-considerations" tabindex="-1">Performance Considerations <a class="header-anchor" href="#performance-considerations" aria-label="Permalink to &quot;Performance Considerations&quot;">​</a></h2><h3 id="indexing-performance" tabindex="-1">Indexing Performance <a class="header-anchor" href="#indexing-performance" aria-label="Permalink to &quot;Indexing Performance&quot;">​</a></h3><ul><li><strong>Parallel file processing</strong> – Rayon thread pool</li><li><strong>Incremental updates</strong> – Hash-based change detection</li><li><strong>Efficient I/O</strong> – Memory-mapped files</li><li><strong>Smart exclusions</strong> – Early filtering of non-code files</li></ul><h3 id="search-performance" tabindex="-1">Search Performance <a class="header-anchor" href="#search-performance" aria-label="Permalink to &quot;Search Performance&quot;">​</a></h3><ul><li><strong>Vector search</strong> – O(log n) with ANN index</li><li><strong>Keyword search</strong> – Tantivy inverted index</li><li><strong>Caching</strong> – Embedding cache, model cache</li><li><strong>Streaming results</strong> – Generator patterns for large result sets</li></ul><h3 id="memory-management" tabindex="-1">Memory Management <a class="header-anchor" href="#memory-management" aria-label="Permalink to &quot;Memory Management&quot;">​</a></h3><ul><li><strong>Lazy loading</strong> – Files loaded only when needed</li><li><strong>Streaming processing</strong> – Process files one at a time</li><li><strong>Index compression</strong> – Binary format for vectors</li><li><strong>Model caching</strong> – Reuse loaded models</li></ul><h2 id="testing-strategy" tabindex="-1">Testing Strategy <a class="header-anchor" href="#testing-strategy" aria-label="Permalink to &quot;Testing Strategy&quot;">​</a></h2><h3 id="unit-tests" tabindex="-1">Unit Tests <a class="header-anchor" href="#unit-tests" aria-label="Permalink to &quot;Unit Tests&quot;">​</a></h3><p>Each crate has unit tests:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --workspace</span></span></code></pre></div><h3 id="integration-tests" tabindex="-1">Integration Tests <a class="header-anchor" href="#integration-tests" aria-label="Permalink to &quot;Integration Tests&quot;">​</a></h3><p>End-to-end testing in ck-cli:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ck-cli</span></span></code></pre></div><h3 id="feature-tests" tabindex="-1">Feature Tests <a class="header-anchor" href="#feature-tests" aria-label="Permalink to &quot;Feature Tests&quot;">​</a></h3><p>Test each feature combination:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --each-feature</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --workspace</span></span></code></pre></div><h2 id="build-process" tabindex="-1">Build Process <a class="header-anchor" href="#build-process" aria-label="Permalink to &quot;Build Process&quot;">​</a></h2><h3 id="development" tabindex="-1">Development <a class="header-anchor" href="#development" aria-label="Permalink to &quot;Development&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build all crates</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --workspace</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build release</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --workspace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --release</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run tests</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --workspace</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Lint</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clippy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --workspace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all-features</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Format</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fmt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span></span></code></pre></div><h3 id="release" tabindex="-1">Release <a class="header-anchor" href="#release" aria-label="Permalink to &quot;Release&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Version bump (all crates)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Update Cargo.toml in each crate</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build and test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --workspace</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clippy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --workspace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all-features</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fmt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --check</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Publish to crates.io</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ck-core</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ck-models</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ... (publish in dependency order)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ck-cli</span></span></code></pre></div><h2 id="extension-points" tabindex="-1">Extension Points <a class="header-anchor" href="#extension-points" aria-label="Permalink to &quot;Extension Points&quot;">​</a></h2><h3 id="adding-new-embedding-models" tabindex="-1">Adding New Embedding Models <a class="header-anchor" href="#adding-new-embedding-models" aria-label="Permalink to &quot;Adding New Embedding Models&quot;">​</a></h3><ol><li>Add model config to <code>ck-models/src/registry.rs</code></li><li>Implement embedding in <code>ck-embed</code></li><li>Add CLI flag support in <code>ck-cli</code></li></ol><h3 id="adding-new-languages" tabindex="-1">Adding New Languages <a class="header-anchor" href="#adding-new-languages" aria-label="Permalink to &quot;Adding New Languages&quot;">​</a></h3><ol><li>Add tree-sitter grammar to <code>ck-chunk/Cargo.toml</code></li><li>Implement parser in <code>ck-chunk/src/parsers/</code></li><li>Register language in <code>ck-chunk/src/lib.rs</code></li></ol><h3 id="adding-new-search-modes" tabindex="-1">Adding New Search Modes <a class="header-anchor" href="#adding-new-search-modes" aria-label="Permalink to &quot;Adding New Search Modes&quot;">​</a></h3><ol><li>Implement engine in <code>ck-engine/src/</code></li><li>Add CLI flag in <code>ck-cli/src/args.rs</code></li><li>Wire up in <code>ck-cli/src/main.rs</code></li></ol><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li>Read <a href="/ck/contributing/development.html">contributing guide</a></li><li>Check <a href="/ck/reference/cli.html">CLI reference</a></li><li>Explore <a href="/ck/reference/models.html">embedding models</a></li><li>See <a href="/ck/reference/configuration.html">configuration</a></li></ul>`,105)])])}const g=a(l,[["render",t]]);export{k as __pageData,g as default};
