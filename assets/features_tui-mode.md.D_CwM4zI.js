import{_ as i,c as e,o as a,ag as t}from"./chunks/framework.BmMagzGG.js";const g=JSON.parse('{"title":"TUI (Interactive) Mode","description":"","frontmatter":{},"headers":[],"relativePath":"features/tui-mode.md","filePath":"features/tui-mode.md"}'),n={name:"features/tui-mode.md"};function l(o,s,r,p,d,h){return a(),e("div",null,[...s[0]||(s[0]=[t(`<h1 id="tui-interactive-mode" tabindex="-1">TUI (Interactive) Mode <a class="header-anchor" href="#tui-interactive-mode" aria-label="Permalink to &quot;TUI (Interactive) Mode&quot;">​</a></h1><p>The TUI (Text User Interface) provides a beautiful, interactive search experience with live results and code preview. This reference covers all features, keyboard shortcuts, and technical details of the TUI mode.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The TUI mode transforms <code>ck</code> into a visual, interactive search tool that provides:</p><ul><li><strong>Live search results</strong> as you type</li><li><strong>Multiple preview modes</strong> for understanding code context</li><li><strong>Semantic, regex, and hybrid search</strong> modes switchable with a keypress</li><li><strong>Keyboard-driven navigation</strong> for efficiency</li><li><strong>Syntax highlighting</strong> and code structure visualization</li></ul><p>The TUI is designed for:</p><ul><li><strong>Code discovery</strong>: Learning how a codebase works</li><li><strong>Finding implementations</strong>: Locating specific patterns or concepts</li><li><strong>Comparing approaches</strong>: Seeing different implementations side-by-side</li><li><strong>Quick exploration</strong>: Rapid iteration on search queries</li></ul><h2 id="launching-the-tui" tabindex="-1">Launching the TUI <a class="header-anchor" href="#launching-the-tui" aria-label="Permalink to &quot;Launching the TUI&quot;">​</a></h2><h3 id="basic-launch" tabindex="-1">Basic Launch <a class="header-anchor" href="#basic-launch" aria-label="Permalink to &quot;Basic Launch&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start interactive search in current directory</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tui</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start in a specific directory</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tui</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span></code></pre></div><h3 id="launch-with-initial-query" tabindex="-1">Launch with Initial Query <a class="header-anchor" href="#launch-with-initial-query" aria-label="Permalink to &quot;Launch with Initial Query&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start with semantic search</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tui</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sem</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;error handling&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start with regex pattern</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tui</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --regex</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fn \\w+_test&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start with hybrid search</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tui</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hybrid</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;timeout&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><h3 id="launch-behavior" tabindex="-1">Launch Behavior <a class="header-anchor" href="#launch-behavior" aria-label="Permalink to &quot;Launch Behavior&quot;">​</a></h3><ul><li>First search in a directory creates an index (~1-2 seconds for medium repos)</li><li>Subsequent searches are instant (uses cached index)</li><li>TUI respects <code>.gitignore</code> and <code>.ckignore</code> files</li><li>Defaults to semantic search mode</li></ul><h2 id="interface-layout" tabindex="-1">Interface Layout <a class="header-anchor" href="#interface-layout" aria-label="Permalink to &quot;Interface Layout&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌─────────────────────────────────────────────────────┐</span></span>
<span class="line"><span>│ Search: error handling              [Semantic] [●] │  ← Search box with mode indicator</span></span>
<span class="line"><span>├─────────────────────────────────────────────────────┤</span></span>
<span class="line"><span>│ Results (234)                                       │</span></span>
<span class="line"><span>│ ● src/lib.rs:45 (0.92)                            │  ← Results list with:</span></span>
<span class="line"><span>│   src/error.rs:12 (0.88)                          │    - Selection indicator</span></span>
<span class="line"><span>│   src/handler.rs:89 (0.85)                        │    - File path and line number</span></span>
<span class="line"><span>│   tests/error_test.rs:23 (0.82)                   │    - Relevance score (semantic)</span></span>
<span class="line"><span>│   docs/errors.md:5 (0.79)                         │</span></span>
<span class="line"><span>├─────────────────────────────────────────────────────┤</span></span>
<span class="line"><span>│ Preview: src/lib.rs:45-60              [Chunks]    │  ← Preview pane with:</span></span>
<span class="line"><span>│                                                     │    - File location</span></span>
<span class="line"><span>│ ┌─ function handle_error • 45 tokens ─┐           │    - Preview mode indicator</span></span>
<span class="line"><span>│ │                                      │           │    - Syntax highlighting</span></span>
<span class="line"><span>│ │  pub fn handle_error(e: Error) -&gt; Result&lt;()&gt; {  │    - Code structure</span></span>
<span class="line"><span>│ │      match e {                                   │</span></span>
<span class="line"><span>│ │          Error::Io(err) =&gt; {...}                 │</span></span>
<span class="line"><span>│ │          Error::Parse(err) =&gt; {...}              │</span></span>
<span class="line"><span>│ │      }                                            │</span></span>
<span class="line"><span>│ │  }                                                │</span></span>
<span class="line"><span>│ └──────────────────────────────────────┘           │</span></span>
<span class="line"><span>└─────────────────────────────────────────────────────┘</span></span></code></pre></div><h3 id="interface-elements" tabindex="-1">Interface Elements <a class="header-anchor" href="#interface-elements" aria-label="Permalink to &quot;Interface Elements&quot;">​</a></h3><p><strong>Top bar:</strong></p><ul><li>Query input field (editable when in search mode)</li><li>Search mode indicator: <code>[Semantic]</code>, <code>[Regex]</code>, or <code>[Hybrid]</code></li><li>Active indicator: <code>[●]</code> shows search is active</li></ul><p><strong>Results pane:</strong></p><ul><li>File paths relative to search directory</li><li>Line numbers where matches occur</li><li>Relevance scores (0.0-1.0 in semantic/hybrid modes)</li><li>Selection indicator (●) shows current result</li><li>Total result count</li></ul><p><strong>Preview pane:</strong></p><ul><li>Current file and line range</li><li>Preview mode indicator: <code>[Chunks]</code>, <code>[Heatmap]</code>, or <code>[Full File]</code></li><li>Syntax-highlighted code</li><li>Chunk boundaries (in chunks mode)</li><li>Relevance heat coloring (in heatmap mode)</li></ul><h2 id="keyboard-shortcuts" tabindex="-1">Keyboard Shortcuts <a class="header-anchor" href="#keyboard-shortcuts" aria-label="Permalink to &quot;Keyboard Shortcuts&quot;">​</a></h2><h3 id="complete-reference-table" tabindex="-1">Complete Reference Table <a class="header-anchor" href="#complete-reference-table" aria-label="Permalink to &quot;Complete Reference Table&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Key</th><th>Context</th><th>Action</th><th>Description</th></tr></thead><tbody><tr><td><strong>Navigation</strong></td><td></td><td></td><td></td></tr><tr><td><code>↑</code> / <code>k</code></td><td>Results list</td><td>Move up</td><td>Select previous result</td></tr><tr><td><code>↓</code> / <code>j</code></td><td>Results list</td><td>Move down</td><td>Select next result</td></tr><tr><td><code>Ctrl+u</code></td><td>Results list</td><td>Page up</td><td>Jump up half a page of results</td></tr><tr><td><code>Ctrl+d</code></td><td>Results list</td><td>Page down</td><td>Jump down half a page of results</td></tr><tr><td><code>g</code></td><td>Results list</td><td>Jump to top</td><td>Select first result</td></tr><tr><td><code>G</code></td><td>Results list</td><td>Jump to bottom</td><td>Select last result</td></tr><tr><td><code>↑</code> / <code>k</code></td><td>Full-file preview</td><td>Scroll up</td><td>Scroll preview up one line</td></tr><tr><td><code>↓</code> / <code>j</code></td><td>Full-file preview</td><td>Scroll down</td><td>Scroll preview down one line</td></tr><tr><td><strong>Search Input</strong></td><td></td><td></td><td></td></tr><tr><td><code>i</code></td><td>Any</td><td>Enter search mode</td><td>Start editing query</td></tr><tr><td><code>/</code></td><td>Any</td><td>Enter search mode</td><td>Alternative to <code>i</code></td></tr><tr><td><code>Esc</code></td><td>Search mode</td><td>Exit search mode</td><td>Stop editing, keep query</td></tr><tr><td><code>Enter</code></td><td>Search mode</td><td>Execute search</td><td>Run search with current query</td></tr><tr><td><code>Ctrl+c</code></td><td>Search mode</td><td>Clear query</td><td>Delete all text from query</td></tr><tr><td><strong>Search Modes</strong></td><td></td><td></td><td></td></tr><tr><td><code>s</code></td><td>Any</td><td>Semantic mode</td><td>Switch to semantic search</td></tr><tr><td><code>r</code></td><td>Any</td><td>Regex mode</td><td>Switch to regex search</td></tr><tr><td><code>h</code></td><td>Any</td><td>Hybrid mode</td><td>Switch to hybrid search</td></tr><tr><td><strong>Preview Controls</strong></td><td></td><td></td><td></td></tr><tr><td><code>m</code></td><td>Any</td><td>Cycle preview mode</td><td>Rotate: Chunks → Heatmap → Full File → Chunks</td></tr><tr><td><code>f</code></td><td>Any</td><td>Toggle full-file</td><td>Switch between full-file and chunk view</td></tr><tr><td><strong>Actions</strong></td><td></td><td></td><td></td></tr><tr><td><code>Enter</code></td><td>Results list</td><td>Open in editor</td><td>Open file at match line in <code>$EDITOR</code></td></tr><tr><td><code>y</code></td><td>Results list</td><td>Copy path</td><td>Copy file path to system clipboard</td></tr><tr><td><code>q</code></td><td>Any</td><td>Quit</td><td>Exit TUI mode</td></tr><tr><td><code>Esc</code></td><td>Any (not editing)</td><td>Quit</td><td>Alternative quit when not editing</td></tr></tbody></table><h3 id="keyboard-shortcut-tips" tabindex="-1">Keyboard Shortcut Tips <a class="header-anchor" href="#keyboard-shortcut-tips" aria-label="Permalink to &quot;Keyboard Shortcut Tips&quot;">​</a></h3><p><strong>Vi-style navigation:</strong></p><ul><li>All navigation uses <code>j</code>/<code>k</code> for down/up (like vim)</li><li><code>g</code> and <code>G</code> for top/bottom (like vim)</li><li>Works in both results and full-file preview</li></ul><p><strong>Dual-purpose Enter:</strong></p><ul><li>In search mode: Execute search</li><li>In results mode: Open file in editor</li></ul><p><strong>Dual-purpose Escape:</strong></p><ul><li>In search mode: Exit search mode</li><li>In results mode: Quit TUI</li></ul><h2 id="search-modes" tabindex="-1">Search Modes <a class="header-anchor" href="#search-modes" aria-label="Permalink to &quot;Search Modes&quot;">​</a></h2><h3 id="semantic-mode-s" tabindex="-1">Semantic Mode (<code>s</code>) <a class="header-anchor" href="#semantic-mode-s" aria-label="Permalink to &quot;Semantic Mode (\`s\`)&quot;">​</a></h3><p><strong>What it does:</strong> Searches by meaning and concept, not exact text matches. Uses AI embeddings to understand code semantics.</p><p><strong>Example queries:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;error handling&quot;          → Finds: try/catch, Result&lt;&gt;, match arms, panic!</span></span>
<span class="line"><span>&quot;database connection pool&quot; → Finds: connection management code</span></span>
<span class="line"><span>&quot;retry mechanism&quot;          → Finds: backoff, retry loops, circuit breakers</span></span>
<span class="line"><span>&quot;authentication logic&quot;     → Finds: login, auth middleware, token validation</span></span></code></pre></div><p><strong>When to use:</strong></p><ul><li>Finding concepts across different implementations</li><li>Discovering similar patterns written differently</li><li>Learning how something is done in the codebase</li><li>Broad exploration of unfamiliar code</li><li>Finding code that does X without knowing the exact function names</li></ul><p><strong>Strengths:</strong></p><ul><li>Finds conceptually similar code even with different terminology</li><li>Great for cross-language patterns</li><li>Discovers unexpected implementations</li><li>Excellent for learning and exploration</li></ul><p><strong>Limitations:</strong></p><ul><li>Requires index (1-2 second initial cost)</li><li>Less precise for exact syntax patterns</li><li>May return semantically similar but functionally different code</li></ul><p><strong>Result scoring:</strong></p><ul><li>0.9-1.0: Extremely relevant, likely exactly what you want</li><li>0.8-0.9: Highly relevant, strong semantic match</li><li>0.7-0.8: Relevant, worth reviewing</li><li>0.6-0.7: Potentially relevant, may be tangential</li><li>Below 0.6: Weak match, probably not what you want</li></ul><h3 id="regex-mode-r" tabindex="-1">Regex Mode (<code>r</code>) <a class="header-anchor" href="#regex-mode-r" aria-label="Permalink to &quot;Regex Mode (\`r\`)&quot;">​</a></h3><p><strong>What it does:</strong> Classic grep-style pattern matching with full regex support. Searches exact text patterns.</p><p><strong>Example queries:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;fn \\w+_test&quot;              → Finds: fn test_parse, fn integration_test</span></span>
<span class="line"><span>&quot;TODO|FIXME&quot;               → Finds: TODO and FIXME comments</span></span>
<span class="line"><span>&quot;impl .* for&quot;              → Finds: trait implementations in Rust</span></span>
<span class="line"><span>&quot;async fn.*Error&quot;          → Finds: async functions returning errors</span></span></code></pre></div><p><strong>When to use:</strong></p><ul><li>Finding exact patterns or syntax</li><li>Searching for specific identifiers</li><li>Looking for TODOs, FIXMEs, or other markers</li><li>Performance-critical searches (no indexing)</li><li>Very large codebases where indexing is slow</li></ul><p><strong>Strengths:</strong></p><ul><li>No indexing required (instant startup)</li><li>Precise pattern matching</li><li>Full regex power (capture groups, lookahead, etc.)</li><li>Familiar to grep/ripgrep users</li></ul><p><strong>Limitations:</strong></p><ul><li>Doesn&#39;t understand code semantics</li><li>Won&#39;t find semantically similar but textually different code</li><li>Requires knowing exact patterns to search for</li></ul><p><strong>Pattern syntax:</strong></p><ul><li>Uses Rust regex crate (similar to PCRE)</li><li>Case-sensitive by default (use <code>(?i)</code> for case-insensitive)</li><li>Supports: <code>.*</code>, <code>\\w+</code>, <code>\\d+</code>, <code>[a-z]</code>, <code>(group)</code>, etc.</li></ul><h3 id="hybrid-mode-h" tabindex="-1">Hybrid Mode (<code>h</code>) <a class="header-anchor" href="#hybrid-mode-h" aria-label="Permalink to &quot;Hybrid Mode (\`h\`)&quot;">​</a></h3><p><strong>What it does:</strong> Combines semantic ranking with keyword filtering. Results must contain your keyword but are ranked by semantic relevance.</p><div class="warning custom-block"><p class="custom-block-title">RRF Scoring Scale</p><p>Hybrid search uses Reciprocal Rank Fusion (RRF) scoring, which produces values in the 0.01-0.05 range, not 0.0-1.0 like semantic search. For threshold filtering, use values like <code>0.02</code> instead of <code>0.6</code>. See <a href="/ck/features/hybrid-search.html#understanding-hybrid-thresholds">Hybrid Search</a> for details.</p></div><p><strong>Example queries:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;timeout&quot;                  → Finds: Code with &quot;timeout&quot; keyword, ranked by relevance</span></span>
<span class="line"><span>&quot;connect&quot;                  → Finds: Code with &quot;connect&quot;, prioritizes connection logic</span></span>
<span class="line"><span>&quot;parse&quot;                    → Finds: Code with &quot;parse&quot;, ranks parsing functions higher</span></span></code></pre></div><p><strong>When to use:</strong></p><ul><li>You know a keyword but want semantic ranking</li><li>Filtering broad semantic searches to specific terms</li><li>Balance between precision and semantic understanding</li><li>Best of both worlds approach</li></ul><p><strong>Strengths:</strong></p><ul><li>More precise than pure semantic (keyword filter)</li><li>Better ranking than pure regex (semantic scores)</li><li>Good for narrowing semantic results</li></ul><p><strong>Limitations:</strong></p><ul><li>Still requires indexing</li><li>Less flexible than full regex</li><li>Keyword must appear exactly (no fuzzy matching)</li></ul><p><strong>How it works:</strong></p><ol><li>First pass: Regex filter for keyword</li><li>Second pass: Semantic ranking of filtered results</li><li>Results: Only files with keyword, sorted by relevance</li></ol><h2 id="preview-modes" tabindex="-1">Preview Modes <a class="header-anchor" href="#preview-modes" aria-label="Permalink to &quot;Preview Modes&quot;">​</a></h2><h3 id="chunks-mode" tabindex="-1">Chunks Mode <a class="header-anchor" href="#chunks-mode" aria-label="Permalink to &quot;Chunks Mode&quot;">​</a></h3><p><strong>What it shows:</strong> The matched code chunk with semantic boundaries, showing complete functions, classes, or logical blocks.</p><p><strong>Visual example:</strong></p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">┌─ function handle_request • </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tokens ─┐</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│                                        │</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle_request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">method {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│          </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle_get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.await?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│          </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">POST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle_post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.await?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│          </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DELETE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle_delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.await?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│          _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MethodNotAllowed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│      };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│      </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Ok</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└────────────────────────────────────────┘</span></span></code></pre></div><p><strong>Features:</strong></p><ul><li>Shows chunk boundaries with tree-sitter precision</li><li>Displays chunk type (function, class, method, struct, etc.)</li><li>Shows token count estimates (useful for LLM context)</li><li>Breadcrumbs for nested code (e.g., &quot;impl MyStruct &gt; fn new&quot;)</li><li>Syntax highlighting</li><li>Automatic boundary detection</li></ul><p><strong>Best for:</strong></p><ul><li>Understanding code structure</li><li>Finding specific functions or methods</li><li>Seeing complete logical units</li><li>Getting ready-to-copy code blocks</li><li>Understanding scope and boundaries</li></ul><p><strong>Technical details:</strong></p><ul><li>Uses tree-sitter for precise syntax boundaries</li><li>Respects language-specific structure (functions, classes, etc.)</li><li>Falls back to heuristic chunking for unsupported languages</li><li>Chunk size: Configurable, typically 100-500 tokens</li></ul><h3 id="heatmap-mode" tabindex="-1">Heatmap Mode <a class="header-anchor" href="#heatmap-mode" aria-label="Permalink to &quot;Heatmap Mode&quot;">​</a></h3><p><strong>What it shows:</strong> Colors code lines by semantic relevance to your query, showing which specific lines are most relevant.</p><p><strong>Visual example:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>│ 🟢  pub fn process_timeout(duration: Duration) -&gt; Result&lt;()&gt; {  (0.95)</span></span>
<span class="line"><span>│ 🟢      let elapsed = start.elapsed();                          (0.89)</span></span>
<span class="line"><span>│ 🟡      if elapsed &gt; duration {                                 (0.72)</span></span>
<span class="line"><span>│ 🟡          log::warn!(&quot;Operation timed out&quot;);                  (0.68)</span></span>
<span class="line"><span>│ 🟠          return Err(Error::Timeout);                         (0.58)</span></span>
<span class="line"><span>│ ⚪      }                                                        (0.35)</span></span>
<span class="line"><span>│ ⚪      Ok(())                                                   (0.28)</span></span>
<span class="line"><span>│ ⚪  }                                                            (0.15)</span></span></code></pre></div><p><strong>Color Scale:</strong></p><ul><li>🟢 <strong>Bright Green</strong> (0.875-1.0): Extremely relevant, core match</li><li>🟢 <strong>Green</strong> (0.75-0.875): Highly relevant, strong match</li><li>🟡 <strong>Yellow</strong> (0.625-0.75): Moderately relevant, supporting code</li><li>🟠 <strong>Orange</strong> (0.5-0.625): Somewhat relevant, contextual</li><li>⚪ <strong>Gray</strong> (0-0.5): Low relevance, boilerplate or unrelated</li></ul><p><strong>Features:</strong></p><ul><li>Line-by-line relevance scoring</li><li>Visual gradient showing importance</li><li>Exact relevance scores displayed</li><li>Helps identify the most important lines in a file</li><li>Great for skimming large results</li></ul><p><strong>Best for:</strong></p><ul><li>Finding the most relevant lines within a file</li><li>Understanding what specifically matched your query</li><li>Comparing different implementations</li><li>Identifying key lines in large files</li><li>Skipping boilerplate to find core logic</li></ul><p><strong>Technical details:</strong></p><ul><li>Each line gets individual embedding similarity score</li><li>Scores are relative to your search query</li><li>Color thresholds are fixed for consistency</li><li>Works best with semantic and hybrid search</li></ul><h3 id="full-file-mode" tabindex="-1">Full File Mode <a class="header-anchor" href="#full-file-mode" aria-label="Permalink to &quot;Full File Mode&quot;">​</a></h3><p><strong>What it shows:</strong> The complete file with syntax highlighting and scrolling capability.</p><p><strong>Features:</strong></p><ul><li>Full syntax highlighting</li><li>Scrollable with <code>↑</code>/<code>↓</code> or <code>j</code>/<code>k</code></li><li>Automatically jumps to matched line</li><li>Shows file path and current line range</li><li>Great for seeing complete context</li><li>Respects language-specific syntax</li></ul><p><strong>Best for:</strong></p><ul><li>Understanding how matched code fits in the larger file</li><li>Seeing imports, dependencies, and context</li><li>Reading complete implementations</li><li>Understanding file structure</li><li>Finding related code nearby</li></ul><p><strong>Controls in full-file mode:</strong></p><ul><li><code>j</code> / <code>↓</code>: Scroll down one line</li><li><code>k</code> / <code>↑</code>: Scroll up one line</li><li><code>Ctrl+d</code>: Scroll down half page</li><li><code>Ctrl+u</code>: Scroll up half page</li><li><code>f</code>: Toggle back to chunks mode</li><li><code>m</code>: Cycle to chunks or heatmap mode</li></ul><p><strong>Technical details:</strong></p><ul><li>Loads entire file into memory</li><li>Syntax highlighting via tree-sitter</li><li>May be slow for very large files (&gt;10MB)</li><li>Binary files are not displayed</li><li>Initial view centers on matched line</li></ul><h2 id="common-workflows" tabindex="-1">Common Workflows <a class="header-anchor" href="#common-workflows" aria-label="Permalink to &quot;Common Workflows&quot;">​</a></h2><h3 id="finding-a-specific-function" tabindex="-1">Finding a Specific Function <a class="header-anchor" href="#finding-a-specific-function" aria-label="Permalink to &quot;Finding a Specific Function&quot;">​</a></h3><p><strong>Goal:</strong> Locate and open a function for editing</p><p><strong>Steps:</strong></p><ol><li>Launch TUI: <code>ck --tui src/</code></li><li>Press <code>s</code> to ensure semantic mode</li><li>Type query: &quot;parse configuration file&quot;</li><li>Press <code>Enter</code> to search</li><li>Press <code>m</code> to cycle to chunks mode</li><li>Navigate results with <code>j</code>/<code>k</code></li><li>Press <code>Enter</code> to open in editor</li></ol><p><strong>Why this works:</strong></p><ul><li>Semantic search finds conceptually similar functions</li><li>Chunks mode shows complete function boundaries</li><li>Direct editor integration for quick editing</li></ul><h3 id="exploring-error-handling-patterns" tabindex="-1">Exploring Error Handling Patterns <a class="header-anchor" href="#exploring-error-handling-patterns" aria-label="Permalink to &quot;Exploring Error Handling Patterns&quot;">​</a></h3><p><strong>Goal:</strong> Learn how errors are handled across the codebase</p><p><strong>Steps:</strong></p><ol><li>Search: <code>ck --tui --sem &quot;error handling&quot; .</code></li><li>Review initial results</li><li>Press <code>m</code> for heatmap mode</li><li>See which specific lines handle errors</li><li>Press <code>f</code> for full-file context</li><li>Navigate to different files with <code>j</code>/<code>k</code></li><li>Press <code>y</code> to copy interesting file paths</li><li>Open multiple files in editor to compare</li></ol><p><strong>Why this works:</strong></p><ul><li>Semantic search finds various error handling approaches</li><li>Heatmap shows the most relevant error-handling lines</li><li>Full-file mode provides complete implementation context</li></ul><h3 id="finding-todos-with-context" tabindex="-1">Finding TODOs with Context <a class="header-anchor" href="#finding-todos-with-context" aria-label="Permalink to &quot;Finding TODOs with Context&quot;">​</a></h3><p><strong>Goal:</strong> Find all TODO comments and understand surrounding code</p><p><strong>Steps:</strong></p><ol><li>Launch TUI: <code>ck --tui .</code></li><li>Press <code>r</code> for regex mode</li><li>Type pattern: <code>TODO|FIXME|XXX</code></li><li>Press <code>Enter</code> to search</li><li>Press <code>m</code> for chunks mode</li><li>Review each TODO in its function context</li><li>Use <code>y</code> to copy paths for later work</li></ol><p><strong>Why this works:</strong></p><ul><li>Regex mode precisely matches TODO markers</li><li>Chunks mode shows the function/context around each TODO</li><li>Easy to prioritize and track for later</li></ul><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><h3 id="environment-variables" tabindex="-1">Environment Variables <a class="header-anchor" href="#environment-variables" aria-label="Permalink to &quot;Environment Variables&quot;">​</a></h3><p><strong>EDITOR</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Set your preferred editor for the Enter key</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EDITOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nvim           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Neovim</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EDITOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vim            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Vim</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EDITOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">code           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># VS Code (waits for file to close)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EDITOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;code -r&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # VS Code (reuse window)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EDITOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">emacs          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Emacs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EDITOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nano           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Nano</span></span></code></pre></div><p>The TUI uses <code>$EDITOR</code> to determine which editor to launch when you press <code>Enter</code> on a result. The file will open at the specific line number of the match.</p><p><strong>Terminal Configuration</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Ensure proper terminal type (usually automatic)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TERM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xterm-256color   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 256 color support</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># For tmux users</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TERM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">screen-256color  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># tmux 256 color support</span></span></code></pre></div><h3 id="color-scheme" tabindex="-1">Color Scheme <a class="header-anchor" href="#color-scheme" aria-label="Permalink to &quot;Color Scheme&quot;">​</a></h3><p>The TUI adapts to your terminal&#39;s color scheme:</p><p><strong>Recommended terminals:</strong></p><ul><li><strong>macOS</strong>: iTerm2, Alacritty, WezTerm, Terminal.app</li><li><strong>Linux</strong>: Alacritty, kitty, GNOME Terminal, konsole</li><li><strong>Windows</strong>: Windows Terminal, Alacritty, WezTerm</li><li><strong>Cross-platform</strong>: Alacritty, WezTerm</li></ul><p><strong>For best results:</strong></p><ul><li>Use a terminal with 24-bit true color support</li><li>Dark mode terminals generally work best</li><li>Modern terminal emulators (2020+) recommended</li><li>Ensure <code>$TERM</code> is set correctly</li></ul><h3 id="ckignore-configuration" tabindex="-1">.ckignore Configuration <a class="header-anchor" href="#ckignore-configuration" aria-label="Permalink to &quot;.ckignore Configuration&quot;">​</a></h3><p>The TUI respects <code>.ckignore</code> files for excluding directories and files from search:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Example .ckignore</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node_modules/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.log</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.git/</span></span></code></pre></div><p>Place <code>.ckignore</code> in your project root or search directory. See <a href="/ck/reference/configuration.html">Configuration</a> for full details.</p><h2 id="tips-tricks" tabindex="-1">Tips &amp; Tricks <a class="header-anchor" href="#tips-tricks" aria-label="Permalink to &quot;Tips &amp; Tricks&quot;">​</a></h2><h3 id="effective-querying" tabindex="-1">Effective Querying <a class="header-anchor" href="#effective-querying" aria-label="Permalink to &quot;Effective Querying&quot;">​</a></h3><p><strong>Good semantic queries (specific, concept-based):</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>✅ &quot;authentication middleware&quot;      # Specific pattern</span></span>
<span class="line"><span>✅ &quot;database connection pool&quot;       # Clear concept</span></span>
<span class="line"><span>✅ &quot;retry mechanism with backoff&quot;   # Detailed pattern</span></span>
<span class="line"><span>✅ &quot;error propagation&quot;              # Specific technique</span></span>
<span class="line"><span>✅ &quot;lazy initialization&quot;            # Known pattern</span></span></code></pre></div><p><strong>Less effective queries (too vague):</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>❌ &quot;the code that handles stuff&quot;    # Too vague</span></span>
<span class="line"><span>❌ &quot;things&quot;                          # Not specific</span></span>
<span class="line"><span>❌ &quot;good code&quot;                       # Subjective, meaningless</span></span>
<span class="line"><span>❌ &quot;how to&quot;                          # Too general</span></span></code></pre></div><p><strong>Regex pattern tips:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>✅ &quot;fn test_\\w+&quot;                    # Specific pattern</span></span>
<span class="line"><span>✅ &quot;TODO|FIXME|XXX&quot;                 # Multiple alternatives</span></span>
<span class="line"><span>✅ &quot;impl .* for \\w+&quot;                # Trait implementations</span></span>
<span class="line"><span>✅ &quot;async fn.*-&gt; Result&quot;            # Async functions returning results</span></span></code></pre></div><h3 id="performance-tips" tabindex="-1">Performance Tips <a class="header-anchor" href="#performance-tips" aria-label="Permalink to &quot;Performance Tips&quot;">​</a></h3><p><strong>Index management:</strong></p><ol><li><strong>Index once, search many</strong>: First search creates index (~1-2 sec for medium repos)</li><li><strong>Reindex when needed</strong>: Delete <code>.ck/</code> directory to rebuild index</li><li><strong>Exclude large dirs</strong>: Use <code>.ckignore</code> for <code>node_modules</code>, <code>target</code>, etc.</li></ol><p><strong>Search optimization:</strong></p><ol><li><strong>Use regex for exact matches</strong>: Faster than semantic for simple string searches</li><li><strong>Narrow your scope</strong>: Search <code>src/</code> instead of <code>.</code> when possible</li><li><strong>Start specific</strong>: Specific queries return fewer, better results</li></ol><p><strong>Preview optimization:</strong></p><ol><li><strong>Full-file mode</strong>: Use sparingly on large files (can be slow to render)</li><li><strong>Chunks mode</strong>: Fastest preview mode, good default</li><li><strong>Heatmap mode</strong>: Moderate performance, great for skimming</li></ol><h3 id="workflow-optimization" tabindex="-1">Workflow Optimization <a class="header-anchor" href="#workflow-optimization" aria-label="Permalink to &quot;Workflow Optimization&quot;">​</a></h3><p><strong>Set your editor properly:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Add to ~/.bashrc or ~/.zshrc</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EDITOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nvim</span></span></code></pre></div><p><strong>Quick iteration on queries:</strong></p><ul><li>Use <code>i</code> or <code>/</code> to edit search without leaving TUI</li><li>Press <code>Enter</code> to re-run search</li><li>Iterate rapidly on query refinement</li></ul><p><strong>Choose the right preview mode:</strong></p><ul><li><strong>Chunks</strong>: Default, great for understanding structure</li><li><strong>Heatmap</strong>: Best for finding most relevant lines</li><li><strong>Full-file</strong>: Use when you need complete context</li></ul><p><strong>Keyboard efficiency:</strong></p><ul><li>Learn <code>j</code>/<code>k</code> navigation (faster than arrow keys)</li><li>Use <code>g</code>/<code>G</code> for quick jumps to top/bottom</li><li><code>Ctrl+d</code>/<code>Ctrl+u</code> for page navigation</li><li>Press <code>y</code> to copy paths as you browse</li></ul><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><h3 id="tui-not-launching" tabindex="-1">TUI not launching <a class="header-anchor" href="#tui-not-launching" aria-label="Permalink to &quot;TUI not launching&quot;">​</a></h3><p><strong>Symptoms:</strong></p><ul><li>TUI doesn&#39;t appear</li><li>Terminal shows garbled output</li><li>Immediate crash or error</li></ul><p><strong>Solutions:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Check terminal compatibility</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $TERM</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Should output: xterm-256color, screen-256color, etc.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Try explicit TERM setting</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TERM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xterm-256color</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tui</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Verify terminal supports TUI</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tput</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> colors</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Should output: 256 or higher</span></span></code></pre></div><p><strong>Common causes:</strong></p><ul><li>Very old terminal emulator</li><li>SSH session without proper TERM forwarding</li><li>Terminal doesn&#39;t support required features</li></ul><p><strong>Workarounds:</strong></p><ul><li>Use CLI mode instead: <code>ck --sem &quot;query&quot; .</code></li><li>Upgrade terminal emulator</li><li>Use local terminal instead of SSH</li></ul><h3 id="slow-scrolling-in-full-file-mode" tabindex="-1">Slow scrolling in full-file mode <a class="header-anchor" href="#slow-scrolling-in-full-file-mode" aria-label="Permalink to &quot;Slow scrolling in full-file mode&quot;">​</a></h3><p><strong>Solutions:</strong></p><ol><li>Switch to chunks or heatmap mode (press <code>m</code>)</li><li>Use regex mode for very large files</li><li>Narrow search scope to smaller directories</li><li>Exclude large files with <code>.ckignore</code></li></ol><p><strong>Why it happens:</strong></p><ul><li>Very large files (&gt;10MB) are slow to render</li><li>Syntax highlighting is CPU-intensive</li><li>Full-file mode loads entire file into memory</li></ul><h3 id="search-not-finding-anything" tabindex="-1">Search not finding anything <a class="header-anchor" href="#search-not-finding-anything" aria-label="Permalink to &quot;Search not finding anything&quot;">​</a></h3><p><strong>Debugging steps:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. Check mode indicator (top-right)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#    Ensure you&#39;re in the right mode (semantic/regex/hybrid)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. Verify index exists</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .ck/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Should show index files; if not, first search creates it</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3. Try regex mode to confirm file exists</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Press &#39;r&#39; then search for a known string</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 4. Check .gitignore/.ckignore</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .gitignore</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .ckignore</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Look for patterns that might exclude your target files</span></span></code></pre></div><p><strong>Common causes:</strong></p><ul><li>Wrong search mode (semantic vs regex)</li><li>File excluded by <code>.gitignore</code> or <code>.ckignore</code></li><li>Binary file (TUI only searches text)</li><li>Typo in search query</li><li>File outside search directory</li></ul><h3 id="clipboard-not-working" tabindex="-1">Clipboard not working <a class="header-anchor" href="#clipboard-not-working" aria-label="Permalink to &quot;Clipboard not working&quot;">​</a></h3><p><strong>Platform-specific solutions:</strong></p><p><strong>macOS:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Usually works out of the box</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pbcopy</span></span></code></pre></div><p><strong>Linux:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install xclip or xsel</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xclip</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Verify installation</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xclip</span></span></code></pre></div><p><strong>Windows:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Usually works in Windows Terminal</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">where</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clip</span></span></code></pre></div><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li>Learn about <a href="/ck/features/hybrid-search.html#understanding-hybrid-thresholds">hybrid search thresholds</a></li><li>Explore <a href="/ck/features/semantic-search.html">semantic search</a> in depth</li><li>Try <a href="/ck/features/mcp-integration.html">MCP integration</a> with AI agents</li><li>Check <a href="/ck/reference/cli.html">CLI reference</a> for all options</li></ul>`,194)])])}const u=i(n,[["render",l]]);export{g as __pageData,u as default};
